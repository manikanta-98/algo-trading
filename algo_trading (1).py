# -*- coding: utf-8 -*-
"""algo-trading

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vuXpqO1As_mdGDyEzCw37cpseZK7HynC
"""

pip install yfinance pandas numpy scikit-learn gspread oauth2client

!pip install gspread oauth2client

import yfinance as yf
import pandas as pd
import numpy as np
import datetime
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import logging
NIFTY_STOCKS = ['RELIANCE.NS', 'TCS.NS', 'INFY.NS','HDFCBANK.NS', 'ICICIBANK.NS', 'SBIN.NS']
START_DATE = (datetime.datetime.now() - datetime.timedelta(days=365/2)).strftime('%Y-%m-%d')
END_DATE = datetime.datetime.now().strftime('%Y-%m-%d')

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
def compute_rsi(series, period=14):
    delta = series.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

def compute_indicators(df):
    df['RSI'] = compute_rsi(df['Close'])
    df['20DMA'] = df['Close'].rolling(window=20).mean()
    df['50DMA'] = df['Close'].rolling(window=50).mean()
    df['MACD'] = df['Close'].ewm(span=12).mean() - df['Close'].ewm(span=26).mean()
    return df.dropna()
def run_strategy(df):
    df['Signal'] = 0
    condition = (df['RSI'] <30 ) & (df['20DMA'] > df['50DMA'])
    df.loc[condition, 'Signal'] = 1
    return df
def backtest(df):
    df['Daily Return'] = df['Close'].pct_change()
    df['Strategy Return'] = df['Signal'].shift(1) * df['Daily Return']
    total_return = df['Strategy Return'].sum()
    win_ratio = (df['Strategy Return'] > 0).mean()
    return round(total_return * 100, 2), round(win_ratio * 100, 2)

def train_model(df):
    df = df.dropna().copy()
    if len(df) < 10:
        logging.warning("‚ö†Ô∏è Not enough data to train model. Skipping ML training.")
        return None, None
    df['Target'] = np.where(df['Close'].shift(-1) > df['Close'], 1, 0)
    features = df[['RSI', 'MACD', 'Volume']]
    labels = df['Target']
    X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, shuffle=False)
    if len(X_train) == 0:
        logging.warning("‚ö†Ô∏è Training set is empty after split. Skipping ML training.")
        return None, None
    model = DecisionTreeClassifier(max_depth=3)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    return model, round(acc * 100, 2)
def run_algo():
    trade_log_all = []
    summary_data = []

    for ticker in NIFTY_STOCKS:
        logging.info(f"üîç Processing: {ticker}")
        df = yf.download(ticker, start=START_DATE, end=END_DATE, auto_adjust=False)

        if df.empty:
            logging.warning(f"‚ö†Ô∏è No data returned for {ticker}. Skipping.")
            continue

        df = compute_indicators(df)
        df = run_strategy(df)
        ret, win_ratio = backtest(df)
        model, acc = train_model(df)

        trades = df[df['Signal'] == 1].copy()
        trades['Stock'] = ticker
        trades['Date'] = trades.index.strftime('%Y-%m-%d')
        trades = trades[['Date', 'Stock', 'Close', 'RSI', '20DMA', '50DMA']]
        trade_log_all.append(trades)

        summary_data.append({
            'Stock': ticker,
            'Total Return %': ret,
            'Win Ratio %': win_ratio,
            'ML Accuracy %': acc if acc is not None else 'N/A'
        })

    if trade_log_all:
        trade_log_df = pd.concat(trade_log_all, ignore_index=True)
        summary_df = pd.DataFrame(summary_data)

        trade_log_df.to_csv("trade_log.csv", index=False)
        summary_df.to_csv("summary.csv", index=False)
        print("\nüìà Summary:")
        print(summary_df)
        logging.info("‚úÖ Results saved to CSV and printed.")
    else:
        logging.warning("‚ö†Ô∏è No trade signals generated. Nothing to log.")

if __name__ == "__main__":
    try:
        run_algo()
    except Exception as e:
        logging.error(f"‚ùå An error occurred: {e}")